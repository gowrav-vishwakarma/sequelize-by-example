{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SequelizeByExample This is a community initiative to make alternative way to document things by example. To have examples, this document follows a sample data structure. The structure is designed to cover as much examples out of it, as a developer may need from sequelize project. Also this document provides best practises with Sequelize. Start with MySQL and V5 only We works mostly in MySQL and our current version is V5, but we are structuring the document as such, that, others can contribute for other versions or other dialects also. Main Focus Main focus will always be on Reading like Reporting, Grouping, Nested Data with Conditions etc. Also we will try to simplyfy some of technical things under the hood. Sample Database Following will be sample database structure used for our examples, we will try our level best to cover as much real life cases as we can. If you have any case or want to add some other way of solution or change the database structure, you are welcome to contribute. Please check CONTRIBUTION section for more. erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER }|..o{ FRIENDS : has FRIENDS }|..o{ CUSTOMER : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : billing-address DELIVERY-ADDRESS ||--o{ ORDER : shipping-address DELIVERY-ADDRESS ||--o{ INVOICE : billing-address INVOICE ||--|{ ORDER : covers INVOICE }|--|| INVOICE-ITEM : has ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT-CATEGORY }o--o{ PRODUCT-CATEGORY : has PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" PRODUCT ||--o{ INVOICE-ITEM : \"invoiced in\" CUSTOMER { id int name string city string state string status string createdAt datetime updatedAt datetime } FRIENDS{ id int status string createdAt datetime updatedAt datetime } DELIVERY-ADDRESS{ id int customerId int address string city string state string createdAt datetime updatedAt datetime } INVOICE{ id int orderId int customerId int grossAmount double tax double discount double netAmount double billingId int billingDetails json status string createdAt datetime updatedAt datetime } INVOICE-ITEM{ id int invoiceId int productId int price double quantity int grossAmount double tax double discount double netAmount double status string createdAt datetime updatedAt datetime } ORDER { id int customerId int grossAmount double tax double discount double netAmount double billingId int billingDetails json shippingId int shippingDetails json status string createdAt datetime updatedAt datetime } ORDER-ITEM { id int orderId int productId int productDetails json price double quantity int grossAmount double tax double discount double netAmount double status string createdAt datetime updatedAt datetime } PRODUCT { id int categoryId int sku string basePrice double status string createdAt datetime updatedAt datetime } PRODUCT-CATEGORY { id int name int parentId int path text status string createdAt datetime updatedAt datetime } Relations in simple text Customer blongsToMany Customers through Frends Customer hasMany Deliver Addresses Customer hasMany Orders Customer hasMany Invoices DeliverAddresses belongsTo Customer DeliverAddresses hasMany Orders as OrderBillingAddresses DeliverAddresses hasMany Orders as OrderShippingAddresses DeliverAddresses hasMany Invoices as InvoiceBillingAddresses Order belongsTo Customer Order hasMany OrderItem Order hasOne Invoice OrderItem belongsTo Product Invoice belongsTo Customer Invoice hasMany InvoiceItem Invoice belongsTo DeliveryAddresses InvoiceItem belongsTo Invoice InvoiceItem belongsTo Product Product hasMany OrderItems Product hasMany InvoiceItems Product belongsTo Category Category hasMany Products Category belongsTo Category as ParentCategory Category hasMany Category as ChildrenCategories Use the following code on mermaid to generate the above diagram erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER }|..o{ FRIENDS : has FRIENDS }|..o{ CUSTOMER : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers INVOICE }|--|| INVOICE-ITEM : has ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT-CATEGORY }o--o{ PRODUCT-CATEGORY : has PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" PRODUCT ||--o{ INVOICE-ITEM : \"invoiced in\" CUSTOMER { id int name string city string state string status string createdAt datetime updatedAt datetime } FRIENDS{ id int status string createdAt datetime updatedAt datetime } DELIVERY-ADDRESS{ id int customerId int address string city string state string createdAt datetime updatedAt datetime } INVOICE{ id int orderId int grossAmount double tax double discount double netAmount double billingId int billingDetails json status string createdAt datetime updatedAt datetime } INVOICE-ITEM{ id int invoiceId int productId int price double quantity int grossAmount double tax double discount double netAmount double status string createdAt datetime updatedAt datetime } ORDER { id int grossAmount double tax double discount double netAmount double billingId int billingDetails json shippingId int shippingDetails json status string createdAt datetime updatedAt datetime } ORDER-ITEM { id int orderId int productId int productDetails json price double quantity int grossAmount double tax double discount double netAmount double status string createdAt datetime updatedAt datetime } PRODUCT { id int categoryId int sku string basePrice double status string createdAt datetime updatedAt datetime } PRODUCT-CATEGORY { id int name int parentId int path text status string createdAt datetime updatedAt datetime } Mermaid Js Online Editor Live Mermaid Link","title":"Overview"},{"location":"#welcome-to-sequelizebyexample","text":"This is a community initiative to make alternative way to document things by example. To have examples, this document follows a sample data structure. The structure is designed to cover as much examples out of it, as a developer may need from sequelize project. Also this document provides best practises with Sequelize.","title":"Welcome to SequelizeByExample"},{"location":"#start-with-mysql-and-v5-only","text":"We works mostly in MySQL and our current version is V5, but we are structuring the document as such, that, others can contribute for other versions or other dialects also.","title":"Start with MySQL and V5 only"},{"location":"#main-focus","text":"Main focus will always be on Reading like Reporting, Grouping, Nested Data with Conditions etc. Also we will try to simplyfy some of technical things under the hood.","title":"Main Focus"},{"location":"#sample-database","text":"Following will be sample database structure used for our examples, we will try our level best to cover as much real life cases as we can. If you have any case or want to add some other way of solution or change the database structure, you are welcome to contribute. Please check CONTRIBUTION section for more. erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER }|..o{ FRIENDS : has FRIENDS }|..o{ CUSTOMER : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : billing-address DELIVERY-ADDRESS ||--o{ ORDER : shipping-address DELIVERY-ADDRESS ||--o{ INVOICE : billing-address INVOICE ||--|{ ORDER : covers INVOICE }|--|| INVOICE-ITEM : has ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT-CATEGORY }o--o{ PRODUCT-CATEGORY : has PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" PRODUCT ||--o{ INVOICE-ITEM : \"invoiced in\" CUSTOMER { id int name string city string state string status string createdAt datetime updatedAt datetime } FRIENDS{ id int status string createdAt datetime updatedAt datetime } DELIVERY-ADDRESS{ id int customerId int address string city string state string createdAt datetime updatedAt datetime } INVOICE{ id int orderId int customerId int grossAmount double tax double discount double netAmount double billingId int billingDetails json status string createdAt datetime updatedAt datetime } INVOICE-ITEM{ id int invoiceId int productId int price double quantity int grossAmount double tax double discount double netAmount double status string createdAt datetime updatedAt datetime } ORDER { id int customerId int grossAmount double tax double discount double netAmount double billingId int billingDetails json shippingId int shippingDetails json status string createdAt datetime updatedAt datetime } ORDER-ITEM { id int orderId int productId int productDetails json price double quantity int grossAmount double tax double discount double netAmount double status string createdAt datetime updatedAt datetime } PRODUCT { id int categoryId int sku string basePrice double status string createdAt datetime updatedAt datetime } PRODUCT-CATEGORY { id int name int parentId int path text status string createdAt datetime updatedAt datetime }","title":"Sample Database"},{"location":"#relations-in-simple-text","text":"Customer blongsToMany Customers through Frends Customer hasMany Deliver Addresses Customer hasMany Orders Customer hasMany Invoices DeliverAddresses belongsTo Customer DeliverAddresses hasMany Orders as OrderBillingAddresses DeliverAddresses hasMany Orders as OrderShippingAddresses DeliverAddresses hasMany Invoices as InvoiceBillingAddresses Order belongsTo Customer Order hasMany OrderItem Order hasOne Invoice OrderItem belongsTo Product Invoice belongsTo Customer Invoice hasMany InvoiceItem Invoice belongsTo DeliveryAddresses InvoiceItem belongsTo Invoice InvoiceItem belongsTo Product Product hasMany OrderItems Product hasMany InvoiceItems Product belongsTo Category Category hasMany Products Category belongsTo Category as ParentCategory Category hasMany Category as ChildrenCategories Use the following code on mermaid to generate the above diagram erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER }|..o{ FRIENDS : has FRIENDS }|..o{ CUSTOMER : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers INVOICE }|--|| INVOICE-ITEM : has ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT-CATEGORY }o--o{ PRODUCT-CATEGORY : has PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" PRODUCT ||--o{ INVOICE-ITEM : \"invoiced in\" CUSTOMER { id int name string city string state string status string createdAt datetime updatedAt datetime } FRIENDS{ id int status string createdAt datetime updatedAt datetime } DELIVERY-ADDRESS{ id int customerId int address string city string state string createdAt datetime updatedAt datetime } INVOICE{ id int orderId int grossAmount double tax double discount double netAmount double billingId int billingDetails json status string createdAt datetime updatedAt datetime } INVOICE-ITEM{ id int invoiceId int productId int price double quantity int grossAmount double tax double discount double netAmount double status string createdAt datetime updatedAt datetime } ORDER { id int grossAmount double tax double discount double netAmount double billingId int billingDetails json shippingId int shippingDetails json status string createdAt datetime updatedAt datetime } ORDER-ITEM { id int orderId int productId int productDetails json price double quantity int grossAmount double tax double discount double netAmount double status string createdAt datetime updatedAt datetime } PRODUCT { id int categoryId int sku string basePrice double status string createdAt datetime updatedAt datetime } PRODUCT-CATEGORY { id int name int parentId int path text status string createdAt datetime updatedAt datetime } Mermaid Js Online Editor Live Mermaid Link","title":"Relations in simple text"},{"location":"how-to-contribute/","text":"Contribution guide You might have some use cases or solutions, Why not help community, Just create a pull request in the docs and we will build andpublish to docs. That's it.","title":"CONTIBUTE"},{"location":"how-to-contribute/#contribution-guide","text":"You might have some use cases or solutions, Why not help community, Just create a pull request in the docs and we will build andpublish to docs. That's it.","title":"Contribution guide"},{"location":"MySQL/V5/configurations/basic-configuration/","text":"Sequelize configurations by FAQ This quick section defines how the connection can be made, Please refer to main documentation for more details. As, this document focuses on mainly complex operations by examples. Direct configuration","title":"Sequelize configurations by FAQ"},{"location":"MySQL/V5/configurations/basic-configuration/#sequelize-configurations-by-faq","text":"This quick section defines how the connection can be made, Please refer to main documentation for more details. As, this document focuses on mainly complex operations by examples.","title":"Sequelize configurations by FAQ"},{"location":"MySQL/V5/configurations/basic-configuration/#direct-configuration","text":"","title":"Direct configuration"},{"location":"MySQL/V5/models/withclasses/","text":"","title":"Withclasses"},{"location":"MySQL/V5/models/withdefine/","text":"","title":"Models"}]}